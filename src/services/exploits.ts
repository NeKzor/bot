/*
 * Copyright (c) 2023, NeKz
 *
 * SPDX-License-Identifier: MIT
 */

import { log } from "../utils/logger.ts";
import { db } from "./db.ts";

export interface Exploit {
  name: string;
  aliases: string[];
  type: string;
  category: string;
  status: string;
  showcase: string;
  wiki: string;
  overview: string;
}

export const Exploits = {
  List: [] as Exploit[],

  async load() {
    let exploits: Exploit[] = [];

    for await (const exploit of db.list<Exploit>({ prefix: ["exploits"] })) {
      exploits.push(exploit.value);
    }

    if (exploits.length === 0) {
      log.warn("Populating exploits data from file");

      const file = await Deno.readTextFile("./data/portal2_exploits.json");
      exploits = JSON.parse(file) as Exploit[];

      for (const exploit of exploits) {
        await db.set(["exploits", exploit.name], exploit);
      }
    }

    Exploits.List = exploits.map((exploit) => {
      // Search optimization
      exploit.aliases = exploit.aliases.map((alias) => alias.toLowerCase());
      return exploit;
    });
  },
  async find(name: string) {
    const key = ["exploits", name];
    return (await db.get<Exploit>(key)).value;
  },
  async create(exploit: Exploit) {
    const key = ["exploits", exploit.name];

    const result = await db.atomic()
      .check({ key, versionstamp: null })
      .mutate({
        type: "set",
        key,
        value: exploit,
      })
      .commit();

    if (result.ok) {
      Exploits.List.push(exploit);
    }

    return result;
  },
  async update(exploit: Exploit) {
    const key = ["exploits", exploit.name];
    const result = await db.set(key, exploit);

    if (result.ok) {
      const oldExploit = Exploits.List
        .find(({ name }) => name === exploit.name);

      if (oldExploit) {
        Object.assign(oldExploit, exploit);
      } else {
        Exploits.List.push(exploit);
      }
    }

    return result;
  },
  async delete(exploit: Exploit) {
    const key = ["exploits", exploit.name];
    await db.delete(key);

    const oldExploit = Exploits.List
      .findIndex(({ name }) => name === exploit.name);

    if (oldExploit) {
      Exploits.List.splice(oldExploit, 1);
    }
  },
};
